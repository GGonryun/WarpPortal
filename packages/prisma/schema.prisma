generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  name         String
  shell        String
  local        String        @unique
  domain       String
  hash         Int
  Certificates Certificate[]
  Policies     Policy[]
}

enum PolicyAction {
  SUDO
  ALLOW
  DENY
}

model Policy {
  id            String       @id @default(cuid())
  userId        Int
  user          User         @relation(fields: [userId], references: [id])
  destinationId String
  destination   Destination  @relation(fields: [destinationId], references: [id])
  action        PolicyAction
}

model Certificate {
  id          String    @id @default(cuid())
  serial      BigInt    @unique
  fingerprint String
  publicKey   String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  revokedAt   DateTime?
  expiresAt   DateTime
  createdAt   DateTime
}

model Destination {
  id       String   @id @default(cuid())
  hostname String   @unique
  ip       String
  Policy   Policy[]
}

// model UserAttributes {
//   id     String @id @default(cuid())
//   user   User   @relation(fields: [userId], references: [id])
//   userId Int
//   key    String
//   value  String

//   @@unique([userId, key])
// }

// user is going to say `warp <local>@<destination>` but obviously in the future we'll use real log in
